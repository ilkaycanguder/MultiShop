@model List<BasketItemDto>
<div class="col-lg-8 table-responsive mb-5">
    @if (Model != null && Model.Any())
    {
        <table class="table table-light table-borderless table-hover text-center mb-0" id="basketTable">
            <thead class="thead-dark">
                <tr>
                    <th>Ürün</th>
                    <th>Fiyat</th>
                    <th>Miktar</th>
                    <th>Toplam</th>
                    <th>Kaldır</th>
                </tr>
            </thead>
            <tbody class="align-middle">
                @foreach (var item in Model)
                {
                    <tr data-product-id="@item.ProductId">
                        <td class="align-middle">
                            <img src="@item.ProductImageUrl" alt="@item.ProductName"
                                style="width: 50px; height: 60px; object-fit: cover;" class="mr-2">
                            <span class="d-inline-block text-left" style="max-width: 200px; vertical-align: middle;">@item.ProductName</span>
                        </td>
                        <td class="align-middle product-price" data-price="@item.Price">@item.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("tr-TR"))</td>
                        <td class="align-middle">
                            <div class="input-group quantity mx-auto" style="width: 100px;">
                                <div class="input-group-btn">
                                    <button class="btn btn-sm btn-primary btn-minus" data-product-id="@item.ProductId">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                                <input type="text" class="form-control form-control-sm bg-secondary border-0 text-center quantity-input"
                                    value="@item.Quantity" data-product-id="@item.ProductId" min="1" max="10">
                                <div class="input-group-btn">
                                    <button class="btn btn-sm btn-primary btn-plus" data-product-id="@item.ProductId">
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </div>
                            </div>
                        </td>
                        <td class="align-middle product-total">@((item.Price * item.Quantity).ToString("C", System.Globalization.CultureInfo.GetCultureInfo("tr-TR")))</td>
                        <td class="align-middle">
                            <a href="/ShoppingCart/RemoveBasketItem/@item.ProductId" 
                               class="btn btn-sm btn-danger remove-item" 
                               data-product-id="@item.ProductId">
                                <i class="fa fa-times"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        
        <!-- Bilgi mesajları için alan -->
        <div id="basketMessages" class="mt-3"></div>
        
        <!-- JavaScript kodu -->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Artırma butonu işlevi
                document.querySelectorAll('.btn-plus').forEach(button => {
                    button.addEventListener('click', function() {
                        const productId = this.getAttribute('data-product-id');
                        const inputElement = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
                        let quantity = parseInt(inputElement.value) + 1;
                        if (quantity > 10) quantity = 10; // Maksimum limit
                        
                        inputElement.value = quantity;
                        updateBasketItemQuantity(productId, quantity);
                    });
                });
                
                // Azaltma butonu işlevi
                document.querySelectorAll('.btn-minus').forEach(button => {
                    button.addEventListener('click', function() {
                        const productId = this.getAttribute('data-product-id');
                        const inputElement = document.querySelector(`.quantity-input[data-product-id="${productId}"]`);
                        let quantity = parseInt(inputElement.value) - 1;
                        if (quantity < 1) quantity = 1; // Minimum limit
                        
                        inputElement.value = quantity;
                        updateBasketItemQuantity(productId, quantity);
                    });
                });
                
                // Miktar giriş alanı değişiklik işlevi
                document.querySelectorAll('.quantity-input').forEach(input => {
                    input.addEventListener('change', function() {
                        const productId = this.getAttribute('data-product-id');
                        let quantity = parseInt(this.value);
                        
                        // Sınırlar kontrol edilir
                        if (isNaN(quantity) || quantity < 1) quantity = 1;
                        if (quantity > 10) quantity = 10;
                        
                        this.value = quantity;
                        updateBasketItemQuantity(productId, quantity);
                    });
                });
                
                // AJAX ile sepet öğesi miktarını güncelleme
                function updateBasketItemQuantity(productId, quantity) {
                    fetch(`/ShoppingCart/UpdateQuantity?productId=${productId}&quantity=${quantity}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Toplam fiyatı güncelle
                            updateProductTotal(productId, quantity);
                            
                            // Başarı mesajını göster
                            showMessage('success', data.message);
                        } else {
                            // Hata mesajını göster
                            showMessage('danger', data.message);
                        }
                    })
                    .catch(error => {
                        showMessage('danger', 'Bir hata oluştu: ' + error);
                    });
                }
                
                // Ürün toplam fiyatını güncelleme
                function updateProductTotal(productId, quantity) {
                    const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                    const priceElement = row.querySelector('.product-price');
                    const totalElement = row.querySelector('.product-total');
                    
                    const price = parseFloat(priceElement.getAttribute('data-price'));
                    const total = price * quantity;
                    
                    // Türk Lirası formatında toplam fiyatı güncelle
                    totalElement.textContent = new Intl.NumberFormat('tr-TR', { 
                        style: 'currency', 
                        currency: 'TRY' 
                    }).format(total);
                }
                
                // Mesaj gösterme fonksiyonu
                function showMessage(type, message) {
                    const messagesDiv = document.getElementById('basketMessages');
                    messagesDiv.innerHTML = `
                        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                            ${message}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    `;
                    
                    // 3 saniye sonra mesajı otomatik kapat
                    setTimeout(() => {
                        const alert = messagesDiv.querySelector('.alert');
                        if (alert) {
                            $(alert).alert('close');
                        }
                    }, 3000);
                }
            });
        </script>
    }
    else
    {
        <div class="alert alert-info text-center p-5">
            <h4>Sepetinizde ürün bulunmamaktadır</h4>
            <p>Alışverişe başlamak için <a href="/Default/Index" class="alert-link">ana sayfaya</a> dönebilirsiniz.</p>
        </div>
    }
</div>
